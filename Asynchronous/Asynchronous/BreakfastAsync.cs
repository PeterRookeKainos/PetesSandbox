using System;
using System.Collections.Generic;
using System.Threading.Tasks;

/* Code lifted from the microsoft docs (https://learn.microsoft.com/en-us/dotnet/csharp/asynchronous-programming/) 
   with some modifications ;-)
*/ 

/* (note generated by copilot ;-) )
 * In the `AsyncBreakfast` class, asynchronous methods allow multiple tasks to run concurrently without blocking the main thread. Here's how they work:
   
   1. **`async` and `await` Keywords**: 
      - Methods like `FryEggsAsync`, `FryHashBrownsAsync`, and `MakeToastWithButterAndJamAsync` are marked as `async`, meaning they can run asynchronously.
      - The `await` keyword is used to pause the execution of the method until the awaited task completes, allowing other tasks to run in the meantime.
   
   2. **Parallel Execution**:
      - Tasks like frying eggs, frying hash browns, and making toast are started asynchronously and run in parallel. This is achieved by calling these methods without immediately awaiting them, allowing them to execute concurrently.
   
   3. **Task Management**:
      - The asynchronous methods return `Task` or `Task<T>` objects, which represent the ongoing operations. These tasks are awaited later to ensure all operations complete before proceeding.
   
   4. **Non-blocking**:
      - While waiting for tasks to complete, the main thread remains free to handle other operations, improving responsiveness and efficiency.
   
   This approach is particularly useful for I/O-bound or time-consuming operations, such as preparing breakfast items, where tasks can run independently.
 */

namespace AsyncBreakfast
{
    public class BreakfastAsync
    {
        const int DELAY = 2000; 
        public async Task<string> MakeBreakfast()
        {
            Coffee cup = PourCoffee();
            Console.WriteLine("1--> Coffee is ready");

            Console.WriteLine("2,3,4--> Starting eggs, hash brown and toast asynchronously");
            
            // Create tasks for frying eggs, hash browns, and making toast asynchronously
            var eggsTask = FryEggsAsync(2);
            var hashBrownTask = FryHashBrownsAsync(3);
            var toastTask = MakeToastWithButterAndJamAsync(2);
           
            // Create a list of tasks to manage the breakfast items
            var breakfastTasks = new List<Task> { eggsTask, hashBrownTask, toastTask };
            
            // For each of the tasks in the list (breakfastTasks) loop until they are complete
            while (breakfastTasks.Count > 0)
            {
                // Run tasks and wait for any of the breakfast tasks to complete
                Task finishedTask = await Task.WhenAny(breakfastTasks);
                
                // Check which task finished and handle it accordingly
                if (finishedTask == eggsTask)
                {
                    Console.WriteLine("2--> Eggs are ready");
                }
                else if (finishedTask == hashBrownTask)
                {
                    Console.WriteLine("3--> Hash browns are ready");
                }
                else if (finishedTask == toastTask)
                {
                    Console.WriteLine("4--> Toast is ready");
                }
                // Await the finished task to ensure it completes before removing it
                await finishedTask;
                // Remove the finished task from the list
                breakfastTasks.Remove(finishedTask);
            }

            Juice oj = PourOJ();
            Console.WriteLine("5--> Orange juice is ready");
            Console.WriteLine("*--> Breakfast is ready!");
            
            return "Breakfast is ready!";
        }

        // MakeToastWithButterAndJamAsync method is called to make toast with butter and jam asynchronously
        static async Task<Toast> MakeToastWithButterAndJamAsync(int number)
        {
            var toast = await ToastBreadAsync(number);
            ApplyButter(toast);
            ApplyJam(toast);

            return toast;
        }

        private static Juice PourOJ()
        {
            Console.WriteLine("5.1--> Pouring orange juice");
            return new Juice();
        }

        private static void ApplyJam(Toast toast) =>
            Console.WriteLine("4.5--> Putting jam on the toast");

        private static void ApplyButter(Toast toast) =>
            Console.WriteLine("4.4--> Putting butter on the toast");

        // ToastBreadAsync method is called to toast bread asynchronously
        private static async Task<Toast> ToastBreadAsync(int slices)
        {
            for (int slice = 0; slice < slices; slice++)
            {
                Console.WriteLine("4.1--> Putting a slice of bread in the toaster");
            }
            Console.WriteLine("4.2--> Start toasting...");
            await Task.Delay(DELAY);
            Console.WriteLine("4.3--> Remove toast from toaster");

            return new Toast();
        }

        // FryHashBrownsAsync method is called to fry hash browns asynchronously
        private static async Task<HashBrown> FryHashBrownsAsync(int patties)
        {
            Console.WriteLine($"3.1--> Putting {patties} hash brown patties in the pan");
            Console.WriteLine("3.2--> Cooking first side of hash browns...");
            await Task.Delay(DELAY);
            for (int patty = 0; patty < patties; patty++)
            {
                Console.WriteLine("3.3--> Flipping a hash brown patty");
            }
            Console.WriteLine("3.4--> Cooking the second side of hash browns...");
            await Task.Delay(DELAY);
            Console.WriteLine("3.5--> Put hash browns on plate");

            return new HashBrown();
        }

        // FryEggsAsync method is called to fry eggs asynchronously
        private static async Task<Egg> FryEggsAsync(int howMany)
        {
            Console.WriteLine("2.1--> Warming the egg pan...");
            await Task.Delay(DELAY);
            Console.WriteLine($"2.2--> cracking {howMany} eggs");
            Console.WriteLine("2.3--> cooking the eggs ...");
            await Task.Delay(DELAY);
            Console.WriteLine("2.4--> Put eggs on plate");

            return new Egg();
        }

        private static Coffee PourCoffee()
        {
            Console.WriteLine("1.1--> Pouring coffee");
            return new Coffee();
        }
    }
}